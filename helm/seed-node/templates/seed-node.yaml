{{- if $.Values.seed.active }}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{tpl $.Values.seed.fullname .}}
  labels:
    app: {{tpl $.Values.seed.fullname .}}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: {{tpl $.Values.seed.fullname .}}
  template:
    metadata:
      labels:
        app: {{tpl $.Values.seed.fullname .}}
        testnet: {{ $.Values.testnetName }}
        role: seed
        version: {{ (split ":" $.Values.coda.image)._1 }}
      annotations:
        prometheus.io/scrape: 'true'
        prometheus.io/port: '10000'
        prometheus.io/path: '/metrics'
    spec:
      containers:
      - name: seed
        resources:
          limits:
            memory: 6.0Gi
          requests:
            memory: 2.0Gi
            cpu: 1000m
        image: {{ $.Values.coda.image }}
        command: ["/usr/bin/dumb-init", "/root/init_coda.sh"]
        args: [ "daemon",
          "-log-level", "Trace",
          "-log-json",
          "-log-snark-work-gossip", "true",
          "-config-directory", "/root/.coda-config",
          "-log-received-blocks", "true",
          "-client-port", "$(DAEMON_CLIENT_PORT)",
          "-rest-port", "$(DAEMON_REST_PORT)",
          "-external-port", "$(DAEMON_EXTERNAL_PORT)",
          "-metrics-port", "$(DAEMON_METRICS_PORT)",
          "-seed",
          {{- if $.Values.coda.enableFlooding }}
          "-enable-flooding true"
          {{- end -}}
          {{- if $.Values.coda.peerExchange }}
          "-peer-exchange true"
          {{- end -}}
          {{- range $.Values.coda.directPeers }}
          "-direct-peers", {{ . | quote }},
          {{- end -}}
          "-discovery-keypair", "{{ $.Values.seed.discoveryKeypair }}",
          {{- if (ne $.Values.coda.runtimeConfig "") }}
          "-config-file", "/config/daemon.json",
          "-generate-genesis-proof", "true",
          {{- end }}
          {{- range $.Values.coda.seedPeers }}
          "-peer", {{ . | quote }},
          {{- end }}
        ]
        env:
          - name: DAEMON_REST_PORT
            value: {{ $.Values.coda.ports.graphql | quote }}
          - name: DAEMON_CLIENT_PORT
            value: {{ $.Values.coda.ports.p2p | quote }}
          - name: DAEMON_METRICS_PORT
            value: {{ $.Values.coda.ports.metrics | quote }}
          - name: CODA_CLIENT_TRUSTLIST
            value: "10.0.0.0/8"
          - name: DAEMON_EXTERNAL_PORT
            value: {{ $.Values.coda.ports.external | quote }}
        ports:
        - name: p2p-port
          protocol: TCP 
          containerPort: {{ $.Values.coda.ports.p2p }}
        - name: graphql
          protocol: TCP 
          containerPort: {{ $.Values.coda.ports.graphql }}
        - name: metrics
          protocol: TCP 
          containerPort: {{ $.Values.coda.ports.metrics }}
        - name: external
          protocol: TCP 
          containerPort: {{ $.Values.coda.ports.external }}
          hostPort: {{ $.Values.coda.ports.external }}
        imagePullPolicy: Always
      {{- if (ne $.Values.coda.runtimeConfig "") }}
        volumeMounts:
        - name: daemon-config
          mountPath: "/config/"
      volumes:
      - name: daemon-config
        configMap:
          name: {{ tpl $.Values.seed.fullname . }}-daemon-config
      {{- end -}}
{{- end }}
